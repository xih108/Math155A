//
//  MyGeometries.cpp
//
//   Sets up and renders 
//     - the ground plane, and
//     - the surface of rotation
//   for the Math 155A project #6.
//


// Use the static library (so glew32.dll is not needed):
#define GLEW_STATIC
#include <GL/glew.h> 
#include <GLFW/glfw3.h>

#include "LinearR3.h"		// Adjust path as needed.
#include "LinearR4.h"		// Adjust path as needed.
#include "MathMisc.h"       // Adjust path as needed

#include "MyGeometries.h"
#include "TextureProj.h"
#include "PhongData.h"
#include "RgbImage.h"
#include "GlGeomCylinder.h"
#include "GlGeomSphere.h"

// **********************************
// Material to underlie a texture map.
// YOU MAY DEFINE A SECOND ONE OF THESE IF YOU WISH
// **********************************
phMaterial materialUnderTexture;
phMaterial materialUnderTextureDark;

// **************************
// Information for loading textures
// **************************
const int NumTextures = 9;
unsigned int TextureNames[NumTextures];     // Texture names generated by OpenGL
const char* TextureFiles[NumTextures] = {
    "Wall1.bmp",
    "bench.bmp",
    "leg.bmp",
    "pattern1.bmp",
	"floor4.bmp",
	"Pic1.bmp",
	"Pic2.bmp",
	"Pic3.bmp",
	"Pic4.bmp",
};


// *******************************
// For spheres and a cylinder
// *******************************
GlGeomSphere texSphere(4, 4);
GlGeomCylinder texCylinder(4, 4, 4);
GlGeomCylinder texCube(4, 4, 4);


double maxTime = 1.0;
bool singleStep = false;



// ************************
// General data helping with setting up VAO (Vertex Array Objects)
//    and Vertex Buffer Objects.
// ***********************
const int NumObjects = 12;
const int iFloor = 0;
const int iPic1 = 1;
const int iPic2 = 2;
const int iPic3 = 3;
const int iPic4 = 4;
const int iPic5 = 5;
const int iPic6 = 6;
const int iWall = 7;            // RESERVED FOR USE BY 155A PROJECT
const int ilWall = 8;
const int irWall = 9;


unsigned int myVBO[NumObjects];  // a Vertex Buffer Object holds an array of data
unsigned int myVAO[NumObjects];  // a Vertex Array Object - holds info about an array of vertex data;
unsigned int myEBO[NumObjects];  // a Element Array Buffer Object - holds an array of elements (vertex indices)

// ********************************************
// This sets up for texture maps. It is called only once
// ********************************************
void SetupForTextures()
{
    // This material goes under the textures.
    // IF YOU WISH, YOU MAY DEFINE MORE THAN ONE OF THESE TO DIFFERENT GEOMETRIES
    materialUnderTexture.SpecularColor.Set(0.9, 0.9, 0.9);
    materialUnderTexture.AmbientColor.Set(0.3, 0.3, 0.3);
    materialUnderTexture.DiffuseColor.Set(0.7, 0.7, 0.7);       // Increase or decrease to adjust brightness
    materialUnderTexture.SpecularExponent = 40.0;

	materialUnderTextureDark.SpecularColor.Set(0.6, 0.6, 0.6);
	materialUnderTextureDark.AmbientColor.Set(0.2, 0.2, 0.2);
	materialUnderTextureDark.DiffuseColor.Set(0.4, 0.4, 0.4);       // Increase or decrease to adjust brightness
	materialUnderTextureDark.SpecularExponent = 40.0;

    // Load texture maps
    RgbImage texMap;

    glUseProgram(shaderProgramBitmap);
    glActiveTexture(GL_TEXTURE0);
    glGenTextures(NumTextures, TextureNames);
    for (int i = 0; i < NumTextures; i++) {
        texMap.LoadBmpFile(TextureFiles[i]);            // Read i-th texture from the i-th file.
        glBindTexture(GL_TEXTURE_2D, TextureNames[i]);  // Bind (select) the i-th OpenGL texture

        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

        // Set best quality filtering.   Also see below for disabling mipmaps.
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);  // Requires that mipmaps be generated (see below)
        // You may also try GL_LINEAR_MIPMAP_NEAREST -- try looking at the wall from a 30 degree angle, and look for sweeping transitions.

        // Store the texture into the OpenGL texture named TextureNames[i]
        int textureWidth = texMap.GetNumCols();
        int textureHeight = texMap.GetNumRows();
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, textureWidth, textureHeight, 0, GL_RGB, GL_UNSIGNED_BYTE, texMap.ImageData());
 #if 1
        // Use mipmaps  (Best!)
        glGenerateMipmap(GL_TEXTURE_2D);
#else
        // Don't use mipmaps.  Try moving away from the brick wall a great distance
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
#endif

    }

    // Make sure that the shaderProgramBitmap uses the GL_TEXTURE_0 texture.
    glUseProgram(shaderProgramBitmap);
    glUniform1i(glGetUniformLocation(shaderProgramBitmap, "theTextureMap"), 0);
    glActiveTexture(GL_TEXTURE0);


}

// **********************
// This sets up geometries needed for 
//   (a) the floor (ground plane)
//   (b) the back wall
//   (c) the circular mesh
//   (d) two spheres
//   (e) one cylinder
//  It is called only once.
//  YOU NEED TO CHANGE THIS ONCE YOU ADD THE TEXTURE COORDINATES TO THE CIRCULAR SURFACE.
// **********************
void MySetupSurfaces() {

    texSphere.InitializeAttribLocations(vertPos_loc, vertNormal_loc, vertTexCoords_loc);
    texCylinder.InitializeAttribLocations(vertPos_loc, vertNormal_loc, vertTexCoords_loc);
	texCube.InitializeAttribLocations(vertPos_loc, vertNormal_loc, vertTexCoords_loc);



    // Initialize the VAO's, VBO's and EBO's for the ground plane, the back wall
    // and the surface of rotation. Gives them the "vertPos" location,
    // and the "vertNormal"  and the "vertTexCoords" locations in the shader program.
    // No data is loaded into the VBO's or EBO's for the circular surface until the "Remesh"
    //   routines is called

    glGenVertexArrays(NumObjects, &myVAO[0]);
    glGenBuffers(NumObjects, &myVBO[0]);
    glGenBuffers(NumObjects, &myEBO[0]);

    // For the Floor:
    // Allocate the needed Vertex Array Objects (VAO's),
    //      Vertex Buffer Objects (VBO's) and Element Array Buffer Objects (EBO's)
    // Since the floor has only four vertices.  Each vertex stores its
    //    position, its normal (0,1,0) and its (s,t)-coordinates.
    // YOU DO NOT NEED TO REMESH THE FLOOR (OR THE BACK WALL) SINCE WE USE PHONG INTERPOLATION
    float floorVerts[] = {
        // Position              // Normal                  // Texture coordinates
        -5.0f, 0.0f, -5.0f,      0.0f, 1.0f, 0.0f,          0.0f, 1.0f,         // Back left
         5.0f, 0.0f, -5.0f,      0.0f, 1.0f, 0.0f,          1.0f, 1.0f,         // Back right
         5.0f, 0.0f,  5.0f,      0.0f, 1.0f, 0.0f,          1.0f, 0.0f,         // Front right
        -5.0f, 0.0f,  5.0f,      0.0f, 1.0f, 0.0f,          0.0f, 0.0f,         // Front left
    };
    unsigned int floorElts[] = { 0, 3, 1, 2 };
    glBindBuffer(GL_ARRAY_BUFFER, myVBO[iFloor]);
    glBindVertexArray(myVAO[iFloor]);
    glBufferData(GL_ARRAY_BUFFER, sizeof(floorVerts), floorVerts, GL_STATIC_DRAW);
    glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);	   // Vertex positions in the VBO
    glEnableVertexAttribArray(vertPos_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3*sizeof(float)));	// Vertex normals in the VBO
    glEnableVertexAttribArray(vertNormal_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));	// Vertex texture coordinates in the VBO
    glEnableVertexAttribArray(vertTexCoords_loc);									// Enable the stored vertices
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iFloor]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(floorElts) * sizeof(unsigned int), floorElts, GL_STATIC_DRAW);


	float wallVerts[] = {
		// Position              // Normal                  // Texture coordinates
		-5.0f, 5.0f, -5.0f,      0.0f, 0.0f, 1.0f,          0.0f, 1.0f,         // Back left
		5.0f, 5.0f, -5.0f,      0.0f, 0.0f, 1.0f,          1.0f, 1.0f,         // Back right
		5.0f, 0.0f,  -5.0f,      0.0f, 0.0f, 1.0f,          1.0f, 0.0f,         // Front right
		-5.0f, 0.0f,  -5.0f,      0.0f, 0.0f, 1.0f,          0.0f, 0.0f,         // Front left
	};

	unsigned int wallElts[] = { 0, 3, 1, 2 };
	glBindBuffer(GL_ARRAY_BUFFER, myVBO[iWall]);
	glBindVertexArray(myVAO[iWall]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(wallVerts), wallVerts, GL_STATIC_DRAW);
	glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);	   // Vertex positions in the VBO
	glEnableVertexAttribArray(vertPos_loc);									// Enable the stored vertices
	glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));	// Vertex normals in the VBO
	glEnableVertexAttribArray(vertNormal_loc);									// Enable the stored vertices
	glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));	// Vertex texture coordinates in the VBO
	glEnableVertexAttribArray(vertTexCoords_loc);									// Enable the stored vertices
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iWall]);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(wallElts) * sizeof(unsigned int), wallElts, GL_STATIC_DRAW);

	
	float lwallVerts[] = {
		// Position              // Normal                  // Texture coordinates
		-5.0f, 5.0f, 5.0f,      1.0f, 0.0f, 0.0f,          0.0f, 1.0f,         // Back left
		-5.0f, 5.0f, -5.0f,      1.0f, 0.0f, 0.0f,          1.0f, 1.0f,         // Back right
		-5.0f, 0.0f,  -5.0f,      1.0f, 0.0f, 0.0f,          1.0f, 0.0f,         // Front right
		-5.0f, 0.0f,  5.0f,      1.0f, 0.0f, 0.0f,          0.0f, 0.0f,         // Front left
	};

	unsigned int lwallElts[] = { 0, 3, 1, 2 };
	glBindBuffer(GL_ARRAY_BUFFER, myVBO[ilWall]);
	glBindVertexArray(myVAO[ilWall]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(lwallVerts), lwallVerts, GL_STATIC_DRAW);
	glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);	   // Vertex positions in the VBO
	glEnableVertexAttribArray(vertPos_loc);									// Enable the stored vertices
	glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));	// Vertex normals in the VBO
	glEnableVertexAttribArray(vertNormal_loc);									// Enable the stored vertices
	glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));	// Vertex texture coordinates in the VBO
	glEnableVertexAttribArray(vertTexCoords_loc);									// Enable the stored vertices
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[ilWall]);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(lwallElts) * sizeof(unsigned int), lwallElts, GL_STATIC_DRAW);


	float rwallVerts[] = {
		// Position              // Normal                  // Texture coordinates
		5.0f, 5.0f, -5.0f,      -1.0f, 0.0f, 0.0f,          0.0f, 1.0f,         // Back left
		5.0f, 5.0f, 5.0f,      -1.0f, 0.0f, 0.0f,          1.0f, 1.0f,         // Back right
		5.0f, 0.0f, 5.0f,      -1.0f, 0.0f, 0.0f,          1.0f, 0.0f,         // Front right
		5.0f, 0.0f, -5.0f,      -1.0f, 0.0f, 0.0f,          0.0f, 0.0f,         // Front left
	};

	unsigned int rwallElts[] = { 0, 3, 1, 2 };
	glBindBuffer(GL_ARRAY_BUFFER, myVBO[irWall]);
	glBindVertexArray(myVAO[irWall]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(rwallVerts), rwallVerts, GL_STATIC_DRAW);
	glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);	   // Vertex positions in the VBO
	glEnableVertexAttribArray(vertPos_loc);									// Enable the stored vertices
	glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));	// Vertex normals in the VBO
	glEnableVertexAttribArray(vertNormal_loc);									// Enable the stored vertices
	glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));	// Vertex texture coordinates in the VBO
	glEnableVertexAttribArray(vertTexCoords_loc);									// Enable the stored vertices
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[irWall]);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(rwallElts) * sizeof(unsigned int), rwallElts, GL_STATIC_DRAW);

    // No data has been loaded into the VBO's for the circular surface yet.
    // This is done by the "SamsRemeshCircularSurf" routine.

    // FOR THE BACK WALL: ADD YOUR OWN CODE!! 
    // IT WILL BE SIMILAR TO THE FLOOR ABOVE.
    // YOU DO NOT NEED TO REMESH THE BACK WALL - ONE RECTANGLE IS ENOUGH

	float cubeTopVerts[] = {
		// Position              // Normal                  // Texture coordinates
		1.0f, 1.0f, 1.0f,      0.0f, 1.0f, 0.0f,          0.0f, 1.0f,         // Back left
		1.0f, -1.0f, 1.0f,      0.0f, 1.0f, 0.0f,          1.0f, 1.0f,         // Back right
		1.0f, -1.0f,  -1.0f,      0.0f, 1.0f, 0.0f,          1.0f, 0.0f,         // Front right
		1.0f, 1.0f,  -1.0f,      0.0f, 1.0f, 0.0f,          0.0f, 0.0f,         // Front left
		-1.0f, 1.0f,  -1.0f,      0.0f, 1.0f, 0.0f,          0.0f, 0.0f,         // Front left
		-1.0f, 1.0f,  1.0f,      0.0f, 1.0f, 0.0f,          0.0f, 0.0f,         // Front left
		-1.0f, -1.0f,  1.0f,      0.0f, 1.0f, 0.0f,          0.0f, 0.0f,         // Front left
		1.0f, -1.0f,  1.0f,      0.0f, 1.0f, 0.0f,          0.0f, 0.0f,         // Front left
	};

	float cubeBottomVerts[] = {
		// Position              // Normal                  // Texture coordinates
		-1.0f, -1.0f, -1.0f,      0.0f, 1.0f, 0.0f,          0.0f, 1.0f,         // Back left
		-1.0f, 1.0f, -1.0f,      0.0f, 1.0f, 0.0f,          1.0f, 1.0f,         // Back right
		1.0f, 1.0f,  -1.0f,      0.0f, 1.0f, 0.0f,          1.0f, 0.0f,         // Front right
		1.0f, -1.0f,  -1.0f,      0.0f, 1.0f, 0.0f,          0.0f, 0.0f,         // Front left
		1.0f, -1.0f,  1.0f,      0.0f, 1.0f, 0.0f,          0.0f, 0.0f,         // Front left
		-1.0f, -1.0f,  1.0f,      0.0f, 1.0f, 0.0f,          0.0f, 0.0f,         // Front left
		-1.0f, 1.0f,  1.0f,      0.0f, 1.0f, 0.0f,          0.0f, 0.0f,         // Front left
		-1.0f, 1.0f,  -1.0f,      0.0f, 1.0f, 0.0f,          0.0f, 0.0f,         // Front left
	};


	//Picture1
	float pic1Verts[] = {
		// Position              // Normal                  // Texture coordinates
		-2.5f, 4.0f, -4.99f,      0.0f, 0.0f, 1.0f,          0.0f, 1.0f,         // Back left
		2.5f, 4.0f, -4.99f,      0.0f, 0.0f, 1.0f,          1.0f, 1.0f,         // Back right
		2.5f,1.5f,  -4.99f,      0.0f, 0.0f, 1.0f,          1.0f, 0.0f,         // Front right
		-2.5f, 1.5f,  -4.99f,      0.0f, 0.0f, 1.0f,          0.0f, 0.0f,         // Front left
	};

	unsigned int pic1Elts[] = { 0, 3, 1, 2 };
	glBindBuffer(GL_ARRAY_BUFFER, myVBO[iPic1]);
	glBindVertexArray(myVAO[iPic1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(pic1Verts), pic1Verts, GL_STATIC_DRAW);
	glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);	   // Vertex positions in the VBO
	glEnableVertexAttribArray(vertPos_loc);									// Enable the stored vertices
	glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));	// Vertex normals in the VBO
	glEnableVertexAttribArray(vertNormal_loc);									// Enable the stored vertices
	glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));	// Vertex texture coordinates in the VBO
	glEnableVertexAttribArray(vertTexCoords_loc);									// Enable the stored vertices
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iPic1]);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(pic1Elts) * sizeof(unsigned int), pic1Elts, GL_STATIC_DRAW);

	//Picture1
	float pic2Verts[] = {
		// Position              // Normal                  // Texture coordinates
		-4.99f, 4.0f, 3.0f,      1.0f, 0.0f, 0.0f,          0.0f, 1.0f,         // Back left
		-4.99f, 4.0f, 1.0f,      1.0f, 0.0f, 0.0f,          1.0f, 1.0f,         // Back right
		-4.99f,2.0f,  1.0f,      1.0f, 0.0f, 0.0f,          1.0f, 0.0f,         // Front right
		-4.99f, 2.0f, 3.0f,      1.0f, 0.0f, 0.0f,          0.0f, 0.0f,         // Front left
	};

	unsigned int pic2Elts[] = { 0, 3, 1, 2 };
	glBindBuffer(GL_ARRAY_BUFFER, myVBO[iPic2]);
	glBindVertexArray(myVAO[iPic2]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(pic2Verts), pic2Verts, GL_STATIC_DRAW);
	glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);	   // Vertex positions in the VBO
	glEnableVertexAttribArray(vertPos_loc);									// Enable the stored vertices
	glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));	// Vertex normals in the VBO
	glEnableVertexAttribArray(vertNormal_loc);									// Enable the stored vertices
	glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));	// Vertex texture coordinates in the VBO
	glEnableVertexAttribArray(vertTexCoords_loc);									// Enable the stored vertices
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iPic2]);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(pic2Elts) * sizeof(unsigned int), pic2Elts, GL_STATIC_DRAW);

	float pic3Verts[] = {
		// Position              // Normal                  // Texture coordinates
		-4.99f, 4.0f, -1.0f,      1.0f, 0.0f, 0.0f,          0.0f, 1.0f,         // Back left
		-4.99f, 4.0f, -3.0f,      1.0f, 0.0f, 0.0f,          1.0f, 1.0f,         // Back right
		-4.99f,2.0f,  -3.0f,      1.0f, 0.0f, 0.0f,          1.0f, 0.0f,         // Front right
		-4.99f, 2.0f,  -1.0f,      1.0f, 0.0f, 0.0f,          0.0f, 0.0f,         // Front left
	};

	unsigned int pic3Elts[] = { 0, 3, 1, 2 };
	glBindBuffer(GL_ARRAY_BUFFER, myVBO[iPic3]);
	glBindVertexArray(myVAO[iPic3]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(pic3Verts), pic3Verts, GL_STATIC_DRAW);
	glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);	   // Vertex positions in the VBO
	glEnableVertexAttribArray(vertPos_loc);									// Enable the stored vertices
	glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));	// Vertex normals in the VBO
	glEnableVertexAttribArray(vertNormal_loc);									// Enable the stored vertices
	glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));	// Vertex texture coordinates in the VBO
	glEnableVertexAttribArray(vertTexCoords_loc);									// Enable the stored vertices
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iPic3]);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(pic3Elts) * sizeof(unsigned int), pic3Elts, GL_STATIC_DRAW);
    check_for_opengl_errors();      // Watch the console window for error messages!

	float pic4Verts[] = {
		// Position              // Normal                  // Texture coordinates
		4.99f, 4.0f, -3.0f,      -1.0f, 0.0f, 0.0f,          0.0f, 1.0f,         // Back left
		4.99f, 4.0f, -1.0f,      -1.0f, 0.0f, 0.0f,          1.0f, 1.0f,         // Back right
		4.99f, 1.5f,  -1.0f,      -1.0f, 0.0f, 0.0f,          1.0f, 0.0f,         // Front right
		4.99f, 1.5f, -3.0f,     -1.0f, 0.0f, 0.0f,          0.0f, 0.0f,         // Front left
	};

	unsigned int pic4Elts[] = { 0, 3, 1, 2 };
	glBindBuffer(GL_ARRAY_BUFFER, myVBO[iPic4]);
	glBindVertexArray(myVAO[iPic4]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(pic4Verts), pic4Verts, GL_STATIC_DRAW);
	glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);	   // Vertex positions in the VBO
	glEnableVertexAttribArray(vertPos_loc);									// Enable the stored vertices
	glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));	// Vertex normals in the VBO
	glEnableVertexAttribArray(vertNormal_loc);									// Enable the stored vertices
	glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));	// Vertex texture coordinates in the VBO
	glEnableVertexAttribArray(vertTexCoords_loc);									// Enable the stored vertices
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iPic4]);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(pic4Elts) * sizeof(unsigned int), pic4Elts, GL_STATIC_DRAW);
	check_for_opengl_errors();      // Watch the console window for error messages!
}

void renderCube()
{
	float matEntries[16];
	LinearMapR4 matDemo = viewMatrix;
	
	//glBindVertexArray(myVAO[iCubeTop]);
	glDrawArrays(GL_TRIANGLE_FAN, 0, 9);
	//glBindVertexArray(myVAO[iCubeBottom]);
	glDrawArrays(GL_TRIANGLE_FAN, 9, 18);
	//viewMatrix.DumpByColumns(matEntries);
	glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);

	check_for_opengl_errors();
}

void MyRemeshGeometries() 
{
// IT IS NOT NECESSARY TO REMESH EITHER THE FLOOR OR THE BACK WALL
// YOU DO NOT NEED TO CHANGE THIS FOR PROJECT #6.

    SamsRemeshCircularSurf();
    texSphere.Remesh(meshRes, meshRes);
    texCylinder.Remesh(meshRes, meshRes, meshRes);

    check_for_opengl_errors();      // Watch the console window for error messages!
}

// **********************************************
// MODIFY THIS ROUTINE TO CALL YOUR OWN CODE IN
//    TO RENDER THE FLOOR AND THE SPHERES AND 
//    THE CYLINDER.
// **********************************************

void MyRenderGeometries() {
	if (spinMode) {
		currentTime += animateIncrement;
		if (currentTime >= maxTime) {
			currentTime = currentTime - floor(currentTime / maxTime);  // Floor function = round down to nearest integer
		}
		if (singleStep) {
			spinMode = false;       // If in single step mode, turn off future animation
		}
	}


    float matEntries[16];       // Temporary storage for floats
    // ******
    // Render the Floor - using a procedural texture map
    // ******
	//renderCube();

	selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iFloor]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTextureDark.LoadIntoShaders();         
    viewMatrix.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
	glBindTexture(GL_TEXTURE_2D, TextureNames[4]);
	glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    // Draw the floor as a single triangle strip
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);    
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
    check_for_opengl_errors();

    if (renderFloorOnly) {
        return;
    }


    // ************ 
    // Render the back wall
    //  YOU MUST WRITE THIS. IT WILL BE SIMILAR TO THE FLOOR ABOVE. 
    //  BUT USE A BITMAP INSTEAD OF A PROCEDURAL TEXTURE.

	selectShaderProgram(shaderProgramBitmap);
	glBindVertexArray(myVAO[iWall]);                // Select the floor VAO (Vertex Array Object)
	materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
	viewMatrix.DumpByColumns(matEntries);           // Apply the model view matrix
	glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
	glBindTexture(GL_TEXTURE_2D, TextureNames[0]);
	glUniform1i(applyTextureLocation, true);
	glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
	glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
	check_for_opengl_errors();


	// ************ 
	// Render the left wall
	//  YOU MUST WRITE THIS. IT WILL BE SIMILAR TO THE FLOOR ABOVE. 
	//  BUT USE A BITMAP INSTEAD OF A PROCEDURAL TEXTURE.
	selectShaderProgram(shaderProgramBitmap);
	glBindVertexArray(myVAO[ilWall]);                // Select the floor VAO (Vertex Array Object)
	materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
	viewMatrix.DumpByColumns(matEntries);           // Apply the model view matrix
	glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
	glBindTexture(GL_TEXTURE_2D, TextureNames[0]);
	glUniform1i(applyTextureLocation, true);
	glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
	glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
	check_for_opengl_errors();


	// ************ 
	// Render the right wall
	//  YOU MUST WRITE THIS. IT WILL BE SIMILAR TO THE FLOOR ABOVE. 
	//  BUT USE A BITMAP INSTEAD OF A PROCEDURAL TEXTURE.
	selectShaderProgram(shaderProgramBitmap);
	glBindVertexArray(myVAO[irWall]);                // Select the floor VAO (Vertex Array Object)
	materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
	viewMatrix.DumpByColumns(matEntries);           // Apply the model view matrix
	glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
	glBindTexture(GL_TEXTURE_2D, TextureNames[0]);
	glUniform1i(applyTextureLocation, true);
	glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
	glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
	check_for_opengl_errors();

	// ************ 
	// Render the Picture1
	//  YOU MUST WRITE THIS. IT WILL BE SIMILAR TO THE FLOOR ABOVE. 
	//  BUT USE A BITMAP INSTEAD OF A PROCEDURAL TEXTURE.
	selectShaderProgram(shaderProgramBitmap);
	glBindVertexArray(myVAO[iPic1]);                // Select the floor VAO (Vertex Array Object)
	materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
	viewMatrix.DumpByColumns(matEntries);           // Apply the model view matrix
	glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
	glBindTexture(GL_TEXTURE_2D, TextureNames[5]);
	glUniform1i(applyTextureLocation, true);
	glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
	glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
	check_for_opengl_errors();

	// ************ 
	// Render the Picture2
	//  YOU MUST WRITE THIS. IT WILL BE SIMILAR TO THE FLOOR ABOVE. 
	//  BUT USE A BITMAP INSTEAD OF A PROCEDURAL TEXTURE.
	selectShaderProgram(shaderProgramBitmap);
	glBindVertexArray(myVAO[iPic2]);                // Select the floor VAO (Vertex Array Object)
	materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
	viewMatrix.DumpByColumns(matEntries);           // Apply the model view matrix
	glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
	glBindTexture(GL_TEXTURE_2D, TextureNames[6]);
	glUniform1i(applyTextureLocation, true);
	glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
	glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
	check_for_opengl_errors();

	// ************ 
	// Render the Picture3
	//  YOU MUST WRITE THIS. IT WILL BE SIMILAR TO THE FLOOR ABOVE. 
	//  BUT USE A BITMAP INSTEAD OF A PROCEDURAL TEXTURE.
	selectShaderProgram(shaderProgramBitmap);
	glBindVertexArray(myVAO[iPic3]);                // Select the floor VAO (Vertex Array Object)
	materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
	viewMatrix.DumpByColumns(matEntries);           // Apply the model view matrix
	glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
	glBindTexture(GL_TEXTURE_2D, TextureNames[7]);
	glUniform1i(applyTextureLocation, true);
	glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
	glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
	check_for_opengl_errors();

	// ************ 
	// Render the Picture4
	//  YOU MUST WRITE THIS. IT WILL BE SIMILAR TO THE FLOOR ABOVE. 
	//  BUT USE A BITMAP INSTEAD OF A PROCEDURAL TEXTURE.
	selectShaderProgram(shaderProgramBitmap);
	glBindVertexArray(myVAO[iPic4]);                // Select the floor VAO (Vertex Array Object)
	materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
	viewMatrix.DumpByColumns(matEntries);           // Apply the model view matrix
	glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
	glBindTexture(GL_TEXTURE_2D, TextureNames[8]);
	glUniform1i(applyTextureLocation, true);
	glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
	glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
	check_for_opengl_errors();

    // *************
    //Bench
    LinearMapR4 matDemo = viewMatrix;
	matDemo.Mult_glTranslate(0.0, 1, 0.0);
	matDemo.Mult_glRotate(PI / 4, 0, 1, 0);
	matDemo.Mult_glScale(sqrt(2), 0.1, sqrt(2));

    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[1]);     // Choose texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
	texCube.Render();                             // Render the sphere side
	glUniform1i(applyTextureLocation, false);


	LinearMapR4 matDemo1 = viewMatrix;
	matDemo1.Mult_glTranslate(0.0, 1, -2.0);
	matDemo1.Mult_glRotate(PI / 4, 0, 1, 0);
	matDemo1.Mult_glScale(sqrt(2), 0.1, sqrt(2));
	matDemo1.DumpByColumns(matEntries);
	glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
	glBindTexture(GL_TEXTURE_2D, TextureNames[1]);     // Choose texture
	glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
	texCube.Render();                             // Render the sphere side
	glUniform1i(applyTextureLocation, false);

	LinearMapR4 matDemo2 = viewMatrix;
	matDemo2.Mult_glTranslate(0.0, 1, 2.0);
	matDemo2.Mult_glRotate(PI / 4, 0, 1, 0);
	matDemo2.Mult_glScale(sqrt(2), 0.1, sqrt(2));
	matDemo2.DumpByColumns(matEntries);
	glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
	glBindTexture(GL_TEXTURE_2D, TextureNames[1]);     // Choose texture
	glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
	texCube.Render();                             // Render the sphere side
	glUniform1i(applyTextureLocation, false);


	matDemo = viewMatrix;
	matDemo.Mult_glTranslate(-0.8, 0.475, 2.8);
	matDemo.Mult_glScale(0.1, 0.475, 0.1);
	matDemo.DumpByColumns(matEntries);
	glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
	glBindTexture(GL_TEXTURE_2D, TextureNames[1]);    
	glUniform1i(applyTextureLocation, true);           
	texCylinder.Render();                             
	glUniform1i(applyTextureLocation, false);

	matDemo = viewMatrix;
	matDemo.Mult_glTranslate(0.8, 0.475, 2.8);
	matDemo.Mult_glScale(0.1, 0.475, 0.1);
	matDemo.DumpByColumns(matEntries);
	glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
	glBindTexture(GL_TEXTURE_2D, TextureNames[1]);    
	glUniform1i(applyTextureLocation, true);         
	texCylinder.Render();                             
	glUniform1i(applyTextureLocation, false);

	matDemo = viewMatrix;
	matDemo.Mult_glTranslate(-0.8, 0.475, -2.8);
	matDemo.Mult_glScale(0.1, 0.475, 0.1);
	matDemo.DumpByColumns(matEntries);
	glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
	glBindTexture(GL_TEXTURE_2D, TextureNames[1]);    
	glUniform1i(applyTextureLocation, true);          
	texCylinder.Render();                            
	glUniform1i(applyTextureLocation, false);

	matDemo = viewMatrix;
	matDemo.Mult_glTranslate(0.8, 0.475, -2.8);
	matDemo.Mult_glScale(0.1, 0.475, 0.1);
	matDemo.DumpByColumns(matEntries);
	glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
	glBindTexture(GL_TEXTURE_2D, TextureNames[1]);     // Choose texture
	glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
	texCylinder.Render();                             // Render the sphere side
	glUniform1i(applyTextureLocation, false);




	//Render Sculpture
	matDemo = viewMatrix;
	matDemo.Mult_glTranslate(4.5, 0.8, 1.5);
	matDemo.Mult_glRotate(PI / 4, 0, 1, 0);
	matDemo.Mult_glScale(sqrt(0.4), 0.8, sqrt(0.4));
	matDemo.DumpByColumns(matEntries);
	glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
	glBindTexture(GL_TEXTURE_2D, TextureNames[1]);
	glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
	texCube.Render();                        // Render the sphere side
	glUniform1i(applyTextureLocation, false);


	matDemo = viewMatrix;
	matDemo.Mult_glTranslate(4.5, 2.4, 1.5);
	matDemo.Mult_glRotate(PI / 2, 0, 0, 1);
	matDemo.Mult_glRotate(currentTime*PI2, 1, 0, 0);
	matDemo.Mult_glScale(0.4, 0.05, 0.4);
	matDemo.DumpByColumns(matEntries);
	glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
	glBindTexture(GL_TEXTURE_2D, TextureNames[3]);
	glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
	texCylinder.Render();                        // Render the sphere side
	glUniform1i(applyTextureLocation, false);


	matDemo = viewMatrix;
	matDemo.Mult_glTranslate(4.5, 1.9, 1.5);
	matDemo.Mult_glScale(0.02, 0.3, 0.02);
	matDemo.DumpByColumns(matEntries);
	glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
	glBindTexture(GL_TEXTURE_2D, TextureNames[2]);
	glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
	texCylinder.Render();                        // Render the sphere side
	glUniform1i(applyTextureLocation, false);

    check_for_opengl_errors();      // Watch the console window for error messages!
}

void SamsRenderCircularSurf()
{
    float matEntries[16];       // Temporary storage for floats

    //glBindVertexArray(myVAO[iCircularSurf]);

    // Calculate the model view matrix for the circular surface
    LinearMapR4 matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-0.8, 0.475, 2.8);     // Center in the back & raise up
    matDemo.Mult_glScale(0.3, 0.7, 0.3);         // Adjust the circular diameter and height

                                                 // Set the uniform values (they are not stored with the VAO and thus must be set again everytime
    materialUnderTexture.LoadIntoShaders();                       // Use the bright underlying material
    matDemo.DumpByColumns(matEntries);
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries); // Select the modelview matrix to place it
    glBindTexture(GL_TEXTURE_2D, TextureNames[1]);     // Choose Mandala texture
    // ONCE YOU HAVE TEXTURE COORDINATES FOR THE CIRCULAR SURFACE, PUT THE NEXT LINE BACK IN.
    //glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
                                                                   // Draw the the triangle strips
    for (int i = 0; i < meshRes; i++) {
        glDrawElements(GL_TRIANGLE_STRIP, 1 + 2 * meshRes, GL_UNSIGNED_INT,
            (void*)(i * (1 + 2 * meshRes) * sizeof(unsigned int)));
    }
    glUniform1i(applyTextureLocation, false);           // Disable applying the texture!
}


// *******
// ADD TEXTURE COORDINATES TO EITHER YOUR OWN "MyRemeshCircularSurf" or
// TO THE PROVIDED "SamsRemeshCircularSurf"
// IF YOU USE YOUR OWN, ALSO REPLACE "SamsRenderCircularMesh" WITH YOUR
// OWN "MyRenderCircularMesh" IF NEEDED.
// TASKS FOR ADDING TEXTURE COORDINATES:
//    a. Change stride to 8*sizeof(float) instead 6*sizeof(float).
//    b. Be sure to allocate enough memory for circularVerts[].
//    c. Calculate the (s,t) texture coordinates, put them in the array.
//    d. Update the calls to glVertexAttribPointer and glEnableVertexAttribArray
//         in the routine MySetupSurfaces above.  
//       And, add new calls for the texture coordinates.

void SamsRemeshCircularSurf()
{

    // Circular surface vertices.
    int numCircularVerts = 1 + meshRes * meshRes;
    float* circularVerts = new float[8 * numCircularVerts];
    // Circular surface elements (indices to vertices in a triangle strip)
    int numCircularElts = meshRes * (1 + 2 * meshRes);
    unsigned int* circularElements = new unsigned int[numCircularElts];

    float* toPtr = circularVerts;
    *(toPtr++) = 0.0f;      // Center point
    *(toPtr++) = 0.0f;
    *(toPtr++) = 0.0f;
    *(toPtr++) = 0.0f;      // Center normal
    *(toPtr++) = 1.0f;
    *(toPtr++) = 0.0f;
	*(toPtr++) = 0.5f;
	*(toPtr++) = 0.5f;
    for (int i = 0; i < meshRes; i++) {
        float theta = (float)PI2 * ((float)i) / (float)meshRes;
        float c = cosf(theta);
        float s = sinf(theta);
        for (int j = 1; j <= meshRes; j++) {
            float r = 2.7f * (float)PI * ((float)j) / (float)meshRes;
            float rprime = -(1 / ((r + 1.0f)*(r + 1.0f))*sinf(r) + r * cosf(r) / (r + 1.0f));
            float norm = sqrtf(1.0f + rprime * rprime);
            *(toPtr++) = c * r;                 // (i,j) point
            *(toPtr++) = -r * sinf(r) / (r + 1.0f);
            *(toPtr++) = s * r;
            *(toPtr++) = -c * rprime / norm;      // (i,j) normal
            *(toPtr++) = 1.0f / norm;
            *(toPtr++) = -s * rprime / norm;
			*(toPtr++) = 0.5f + c*r*0.5f/(2.7f *(float)PI);                         // Texture coordinate
			*(toPtr++) = 0.5f + s * r*0.5f / (2.7f * (float)PI);
        }

    }

    unsigned int* toElt = circularElements;
    for (int i = 0; i < meshRes; i++) {
        *(toElt++) = 0;         // Central vertex
        for (int j = 0; j < meshRes; j++) {
            *(toElt++) = ((i + 1) % meshRes) * meshRes + j + 1;
            *(toElt++) = i * meshRes + j + 1;
        }
    }

   // glBindVertexArray(myVAO[iCircularSurf]);
    //glBindBuffer(GL_ARRAY_BUFFER, myVBO[iCircularSurf]);
    //glBufferData(GL_ARRAY_BUFFER, 8 * numCircularVerts * sizeof(float), circularVerts, GL_STATIC_DRAW);
    //glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iCircularSurf]);
    //glBufferData(GL_ELEMENT_ARRAY_BUFFER, numCircularElts * sizeof(unsigned int), circularElements, GL_STATIC_DRAW);

    delete[] circularVerts;
    delete[] circularElements;
}

